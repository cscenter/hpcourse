// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: protocol.proto

#ifndef PROTOBUF_protocol_2eproto__INCLUDED
#define PROTOBUF_protocol_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 2006000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 2006001 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)

namespace communication {

// Internal implementation detail -- do not call these.
void  protobuf_AddDesc_protocol_2eproto();
void protobuf_AssignDesc_protocol_2eproto();
void protobuf_ShutdownFile_protocol_2eproto();

class WrapperMessage;
class ServerRequest;
class ServerResponse;
class Task;
class Task_Param;
class SubmitTask;
class SubmitTaskResponse;
class Subscribe;
class SubscribeResponse;
class ListTasks;
class ListTasksResponse;
class ListTasksResponse_TaskDescription;

enum Status {
  OK = 1,
  ERROR = 2
};
bool Status_IsValid(int value);
const Status Status_MIN = OK;
const Status Status_MAX = ERROR;
const int Status_ARRAYSIZE = Status_MAX + 1;

const ::google::protobuf::EnumDescriptor* Status_descriptor();
inline const ::std::string& Status_Name(Status value) {
  return ::google::protobuf::internal::NameOfEnum(
    Status_descriptor(), value);
}
inline bool Status_Parse(
    const ::std::string& name, Status* value) {
  return ::google::protobuf::internal::ParseNamedEnum<Status>(
    Status_descriptor(), name, value);
}
// ===================================================================

class WrapperMessage : public ::google::protobuf::Message {
 public:
  WrapperMessage();
  virtual ~WrapperMessage();

  WrapperMessage(const WrapperMessage& from);

  inline WrapperMessage& operator=(const WrapperMessage& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const WrapperMessage& default_instance();

  void Swap(WrapperMessage* other);

  // implements Message ----------------------------------------------

  WrapperMessage* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const WrapperMessage& from);
  void MergeFrom(const WrapperMessage& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .communication.ServerRequest request = 1;
  inline bool has_request() const;
  inline void clear_request();
  static const int kRequestFieldNumber = 1;
  inline const ::communication::ServerRequest& request() const;
  inline ::communication::ServerRequest* mutable_request();
  inline ::communication::ServerRequest* release_request();
  inline void set_allocated_request(::communication::ServerRequest* request);

  // optional .communication.ServerResponse response = 2;
  inline bool has_response() const;
  inline void clear_response();
  static const int kResponseFieldNumber = 2;
  inline const ::communication::ServerResponse& response() const;
  inline ::communication::ServerResponse* mutable_response();
  inline ::communication::ServerResponse* release_response();
  inline void set_allocated_response(::communication::ServerResponse* response);

  // @@protoc_insertion_point(class_scope:communication.WrapperMessage)
 private:
  inline void set_has_request();
  inline void clear_has_request();
  inline void set_has_response();
  inline void clear_has_response();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::communication::ServerRequest* request_;
  ::communication::ServerResponse* response_;
  friend void  protobuf_AddDesc_protocol_2eproto();
  friend void protobuf_AssignDesc_protocol_2eproto();
  friend void protobuf_ShutdownFile_protocol_2eproto();

  void InitAsDefaultInstance();
  static WrapperMessage* default_instance_;
};
// -------------------------------------------------------------------

class ServerRequest : public ::google::protobuf::Message {
 public:
  ServerRequest();
  virtual ~ServerRequest();

  ServerRequest(const ServerRequest& from);

  inline ServerRequest& operator=(const ServerRequest& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const ServerRequest& default_instance();

  void Swap(ServerRequest* other);

  // implements Message ----------------------------------------------

  ServerRequest* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const ServerRequest& from);
  void MergeFrom(const ServerRequest& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required string client_id = 1;
  inline bool has_client_id() const;
  inline void clear_client_id();
  static const int kClientIdFieldNumber = 1;
  inline const ::std::string& client_id() const;
  inline void set_client_id(const ::std::string& value);
  inline void set_client_id(const char* value);
  inline void set_client_id(const char* value, size_t size);
  inline ::std::string* mutable_client_id();
  inline ::std::string* release_client_id();
  inline void set_allocated_client_id(::std::string* client_id);

  // required int64 request_id = 2;
  inline bool has_request_id() const;
  inline void clear_request_id();
  static const int kRequestIdFieldNumber = 2;
  inline ::google::protobuf::int64 request_id() const;
  inline void set_request_id(::google::protobuf::int64 value);

  // optional .communication.SubmitTask submit = 3;
  inline bool has_submit() const;
  inline void clear_submit();
  static const int kSubmitFieldNumber = 3;
  inline const ::communication::SubmitTask& submit() const;
  inline ::communication::SubmitTask* mutable_submit();
  inline ::communication::SubmitTask* release_submit();
  inline void set_allocated_submit(::communication::SubmitTask* submit);

  // optional .communication.Subscribe subscribe = 4;
  inline bool has_subscribe() const;
  inline void clear_subscribe();
  static const int kSubscribeFieldNumber = 4;
  inline const ::communication::Subscribe& subscribe() const;
  inline ::communication::Subscribe* mutable_subscribe();
  inline ::communication::Subscribe* release_subscribe();
  inline void set_allocated_subscribe(::communication::Subscribe* subscribe);

  // optional .communication.ListTasks list = 5;
  inline bool has_list() const;
  inline void clear_list();
  static const int kListFieldNumber = 5;
  inline const ::communication::ListTasks& list() const;
  inline ::communication::ListTasks* mutable_list();
  inline ::communication::ListTasks* release_list();
  inline void set_allocated_list(::communication::ListTasks* list);

  // @@protoc_insertion_point(class_scope:communication.ServerRequest)
 private:
  inline void set_has_client_id();
  inline void clear_has_client_id();
  inline void set_has_request_id();
  inline void clear_has_request_id();
  inline void set_has_submit();
  inline void clear_has_submit();
  inline void set_has_subscribe();
  inline void clear_has_subscribe();
  inline void set_has_list();
  inline void clear_has_list();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::std::string* client_id_;
  ::google::protobuf::int64 request_id_;
  ::communication::SubmitTask* submit_;
  ::communication::Subscribe* subscribe_;
  ::communication::ListTasks* list_;
  friend void  protobuf_AddDesc_protocol_2eproto();
  friend void protobuf_AssignDesc_protocol_2eproto();
  friend void protobuf_ShutdownFile_protocol_2eproto();

  void InitAsDefaultInstance();
  static ServerRequest* default_instance_;
};
// -------------------------------------------------------------------

class ServerResponse : public ::google::protobuf::Message {
 public:
  ServerResponse();
  virtual ~ServerResponse();

  ServerResponse(const ServerResponse& from);

  inline ServerResponse& operator=(const ServerResponse& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const ServerResponse& default_instance();

  void Swap(ServerResponse* other);

  // implements Message ----------------------------------------------

  ServerResponse* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const ServerResponse& from);
  void MergeFrom(const ServerResponse& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required int64 request_id = 1;
  inline bool has_request_id() const;
  inline void clear_request_id();
  static const int kRequestIdFieldNumber = 1;
  inline ::google::protobuf::int64 request_id() const;
  inline void set_request_id(::google::protobuf::int64 value);

  // optional .communication.SubmitTaskResponse submitResponse = 2;
  inline bool has_submitresponse() const;
  inline void clear_submitresponse();
  static const int kSubmitResponseFieldNumber = 2;
  inline const ::communication::SubmitTaskResponse& submitresponse() const;
  inline ::communication::SubmitTaskResponse* mutable_submitresponse();
  inline ::communication::SubmitTaskResponse* release_submitresponse();
  inline void set_allocated_submitresponse(::communication::SubmitTaskResponse* submitresponse);

  // optional .communication.SubscribeResponse subscribeResponse = 3;
  inline bool has_subscriberesponse() const;
  inline void clear_subscriberesponse();
  static const int kSubscribeResponseFieldNumber = 3;
  inline const ::communication::SubscribeResponse& subscriberesponse() const;
  inline ::communication::SubscribeResponse* mutable_subscriberesponse();
  inline ::communication::SubscribeResponse* release_subscriberesponse();
  inline void set_allocated_subscriberesponse(::communication::SubscribeResponse* subscriberesponse);

  // optional .communication.ListTasksResponse listResponse = 4;
  inline bool has_listresponse() const;
  inline void clear_listresponse();
  static const int kListResponseFieldNumber = 4;
  inline const ::communication::ListTasksResponse& listresponse() const;
  inline ::communication::ListTasksResponse* mutable_listresponse();
  inline ::communication::ListTasksResponse* release_listresponse();
  inline void set_allocated_listresponse(::communication::ListTasksResponse* listresponse);

  // @@protoc_insertion_point(class_scope:communication.ServerResponse)
 private:
  inline void set_has_request_id();
  inline void clear_has_request_id();
  inline void set_has_submitresponse();
  inline void clear_has_submitresponse();
  inline void set_has_subscriberesponse();
  inline void clear_has_subscriberesponse();
  inline void set_has_listresponse();
  inline void clear_has_listresponse();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::int64 request_id_;
  ::communication::SubmitTaskResponse* submitresponse_;
  ::communication::SubscribeResponse* subscriberesponse_;
  ::communication::ListTasksResponse* listresponse_;
  friend void  protobuf_AddDesc_protocol_2eproto();
  friend void protobuf_AssignDesc_protocol_2eproto();
  friend void protobuf_ShutdownFile_protocol_2eproto();

  void InitAsDefaultInstance();
  static ServerResponse* default_instance_;
};
// -------------------------------------------------------------------

class Task_Param : public ::google::protobuf::Message {
 public:
  Task_Param();
  virtual ~Task_Param();

  Task_Param(const Task_Param& from);

  inline Task_Param& operator=(const Task_Param& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Task_Param& default_instance();

  enum ParamValueCase {
    kValue = 1,
    kDependentTaskId = 2,
    PARAM_VALUE_NOT_SET = 0,
  };

  void Swap(Task_Param* other);

  // implements Message ----------------------------------------------

  Task_Param* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Task_Param& from);
  void MergeFrom(const Task_Param& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional int64 value = 1;
  inline bool has_value() const;
  inline void clear_value();
  static const int kValueFieldNumber = 1;
  inline ::google::protobuf::int64 value() const;
  inline void set_value(::google::protobuf::int64 value);

  // optional int64 dependentTaskId = 2;
  inline bool has_dependenttaskid() const;
  inline void clear_dependenttaskid();
  static const int kDependentTaskIdFieldNumber = 2;
  inline ::google::protobuf::int64 dependenttaskid() const;
  inline void set_dependenttaskid(::google::protobuf::int64 value);

  inline ParamValueCase param_value_case() const;
  // @@protoc_insertion_point(class_scope:communication.Task.Param)
 private:
  inline void set_has_value();
  inline void set_has_dependenttaskid();

  inline bool has_param_value();
  void clear_param_value();
  inline void clear_has_param_value();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  union ParamValueUnion {
    ::google::protobuf::int64 value_;
    ::google::protobuf::int64 dependenttaskid_;
  } param_value_;
  ::google::protobuf::uint32 _oneof_case_[1];

  friend void  protobuf_AddDesc_protocol_2eproto();
  friend void protobuf_AssignDesc_protocol_2eproto();
  friend void protobuf_ShutdownFile_protocol_2eproto();

  void InitAsDefaultInstance();
  static Task_Param* default_instance_;
};
// -------------------------------------------------------------------

class Task : public ::google::protobuf::Message {
 public:
  Task();
  virtual ~Task();

  Task(const Task& from);

  inline Task& operator=(const Task& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Task& default_instance();

  void Swap(Task* other);

  // implements Message ----------------------------------------------

  Task* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Task& from);
  void MergeFrom(const Task& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  typedef Task_Param Param;

  // accessors -------------------------------------------------------

  // required .communication.Task.Param a = 1;
  inline bool has_a() const;
  inline void clear_a();
  static const int kAFieldNumber = 1;
  inline const ::communication::Task_Param& a() const;
  inline ::communication::Task_Param* mutable_a();
  inline ::communication::Task_Param* release_a();
  inline void set_allocated_a(::communication::Task_Param* a);

  // required .communication.Task.Param b = 2;
  inline bool has_b() const;
  inline void clear_b();
  static const int kBFieldNumber = 2;
  inline const ::communication::Task_Param& b() const;
  inline ::communication::Task_Param* mutable_b();
  inline ::communication::Task_Param* release_b();
  inline void set_allocated_b(::communication::Task_Param* b);

  // required .communication.Task.Param p = 3;
  inline bool has_p() const;
  inline void clear_p();
  static const int kPFieldNumber = 3;
  inline const ::communication::Task_Param& p() const;
  inline ::communication::Task_Param* mutable_p();
  inline ::communication::Task_Param* release_p();
  inline void set_allocated_p(::communication::Task_Param* p);

  // required .communication.Task.Param m = 4;
  inline bool has_m() const;
  inline void clear_m();
  static const int kMFieldNumber = 4;
  inline const ::communication::Task_Param& m() const;
  inline ::communication::Task_Param* mutable_m();
  inline ::communication::Task_Param* release_m();
  inline void set_allocated_m(::communication::Task_Param* m);

  // required int64 n = 5;
  inline bool has_n() const;
  inline void clear_n();
  static const int kNFieldNumber = 5;
  inline ::google::protobuf::int64 n() const;
  inline void set_n(::google::protobuf::int64 value);

  // @@protoc_insertion_point(class_scope:communication.Task)
 private:
  inline void set_has_a();
  inline void clear_has_a();
  inline void set_has_b();
  inline void clear_has_b();
  inline void set_has_p();
  inline void clear_has_p();
  inline void set_has_m();
  inline void clear_has_m();
  inline void set_has_n();
  inline void clear_has_n();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::communication::Task_Param* a_;
  ::communication::Task_Param* b_;
  ::communication::Task_Param* p_;
  ::communication::Task_Param* m_;
  ::google::protobuf::int64 n_;
  friend void  protobuf_AddDesc_protocol_2eproto();
  friend void protobuf_AssignDesc_protocol_2eproto();
  friend void protobuf_ShutdownFile_protocol_2eproto();

  void InitAsDefaultInstance();
  static Task* default_instance_;
};
// -------------------------------------------------------------------

class SubmitTask : public ::google::protobuf::Message {
 public:
  SubmitTask();
  virtual ~SubmitTask();

  SubmitTask(const SubmitTask& from);

  inline SubmitTask& operator=(const SubmitTask& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const SubmitTask& default_instance();

  void Swap(SubmitTask* other);

  // implements Message ----------------------------------------------

  SubmitTask* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const SubmitTask& from);
  void MergeFrom(const SubmitTask& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required .communication.Task task = 1;
  inline bool has_task() const;
  inline void clear_task();
  static const int kTaskFieldNumber = 1;
  inline const ::communication::Task& task() const;
  inline ::communication::Task* mutable_task();
  inline ::communication::Task* release_task();
  inline void set_allocated_task(::communication::Task* task);

  // @@protoc_insertion_point(class_scope:communication.SubmitTask)
 private:
  inline void set_has_task();
  inline void clear_has_task();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::communication::Task* task_;
  friend void  protobuf_AddDesc_protocol_2eproto();
  friend void protobuf_AssignDesc_protocol_2eproto();
  friend void protobuf_ShutdownFile_protocol_2eproto();

  void InitAsDefaultInstance();
  static SubmitTask* default_instance_;
};
// -------------------------------------------------------------------

class SubmitTaskResponse : public ::google::protobuf::Message {
 public:
  SubmitTaskResponse();
  virtual ~SubmitTaskResponse();

  SubmitTaskResponse(const SubmitTaskResponse& from);

  inline SubmitTaskResponse& operator=(const SubmitTaskResponse& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const SubmitTaskResponse& default_instance();

  void Swap(SubmitTaskResponse* other);

  // implements Message ----------------------------------------------

  SubmitTaskResponse* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const SubmitTaskResponse& from);
  void MergeFrom(const SubmitTaskResponse& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required int32 submittedTaskId = 1;
  inline bool has_submittedtaskid() const;
  inline void clear_submittedtaskid();
  static const int kSubmittedTaskIdFieldNumber = 1;
  inline ::google::protobuf::int32 submittedtaskid() const;
  inline void set_submittedtaskid(::google::protobuf::int32 value);

  // required .communication.Status status = 2;
  inline bool has_status() const;
  inline void clear_status();
  static const int kStatusFieldNumber = 2;
  inline ::communication::Status status() const;
  inline void set_status(::communication::Status value);

  // @@protoc_insertion_point(class_scope:communication.SubmitTaskResponse)
 private:
  inline void set_has_submittedtaskid();
  inline void clear_has_submittedtaskid();
  inline void set_has_status();
  inline void clear_has_status();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::int32 submittedtaskid_;
  int status_;
  friend void  protobuf_AddDesc_protocol_2eproto();
  friend void protobuf_AssignDesc_protocol_2eproto();
  friend void protobuf_ShutdownFile_protocol_2eproto();

  void InitAsDefaultInstance();
  static SubmitTaskResponse* default_instance_;
};
// -------------------------------------------------------------------

class Subscribe : public ::google::protobuf::Message {
 public:
  Subscribe();
  virtual ~Subscribe();

  Subscribe(const Subscribe& from);

  inline Subscribe& operator=(const Subscribe& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Subscribe& default_instance();

  void Swap(Subscribe* other);

  // implements Message ----------------------------------------------

  Subscribe* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Subscribe& from);
  void MergeFrom(const Subscribe& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required int32 taskId = 1;
  inline bool has_taskid() const;
  inline void clear_taskid();
  static const int kTaskIdFieldNumber = 1;
  inline ::google::protobuf::int32 taskid() const;
  inline void set_taskid(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:communication.Subscribe)
 private:
  inline void set_has_taskid();
  inline void clear_has_taskid();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::int32 taskid_;
  friend void  protobuf_AddDesc_protocol_2eproto();
  friend void protobuf_AssignDesc_protocol_2eproto();
  friend void protobuf_ShutdownFile_protocol_2eproto();

  void InitAsDefaultInstance();
  static Subscribe* default_instance_;
};
// -------------------------------------------------------------------

class SubscribeResponse : public ::google::protobuf::Message {
 public:
  SubscribeResponse();
  virtual ~SubscribeResponse();

  SubscribeResponse(const SubscribeResponse& from);

  inline SubscribeResponse& operator=(const SubscribeResponse& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const SubscribeResponse& default_instance();

  void Swap(SubscribeResponse* other);

  // implements Message ----------------------------------------------

  SubscribeResponse* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const SubscribeResponse& from);
  void MergeFrom(const SubscribeResponse& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required .communication.Status status = 1;
  inline bool has_status() const;
  inline void clear_status();
  static const int kStatusFieldNumber = 1;
  inline ::communication::Status status() const;
  inline void set_status(::communication::Status value);

  // optional int64 value = 2;
  inline bool has_value() const;
  inline void clear_value();
  static const int kValueFieldNumber = 2;
  inline ::google::protobuf::int64 value() const;
  inline void set_value(::google::protobuf::int64 value);

  // @@protoc_insertion_point(class_scope:communication.SubscribeResponse)
 private:
  inline void set_has_status();
  inline void clear_has_status();
  inline void set_has_value();
  inline void clear_has_value();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::int64 value_;
  int status_;
  friend void  protobuf_AddDesc_protocol_2eproto();
  friend void protobuf_AssignDesc_protocol_2eproto();
  friend void protobuf_ShutdownFile_protocol_2eproto();

  void InitAsDefaultInstance();
  static SubscribeResponse* default_instance_;
};
// -------------------------------------------------------------------

class ListTasks : public ::google::protobuf::Message {
 public:
  ListTasks();
  virtual ~ListTasks();

  ListTasks(const ListTasks& from);

  inline ListTasks& operator=(const ListTasks& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const ListTasks& default_instance();

  void Swap(ListTasks* other);

  // implements Message ----------------------------------------------

  ListTasks* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const ListTasks& from);
  void MergeFrom(const ListTasks& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:communication.ListTasks)
 private:

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  friend void  protobuf_AddDesc_protocol_2eproto();
  friend void protobuf_AssignDesc_protocol_2eproto();
  friend void protobuf_ShutdownFile_protocol_2eproto();

  void InitAsDefaultInstance();
  static ListTasks* default_instance_;
};
// -------------------------------------------------------------------

class ListTasksResponse_TaskDescription : public ::google::protobuf::Message {
 public:
  ListTasksResponse_TaskDescription();
  virtual ~ListTasksResponse_TaskDescription();

  ListTasksResponse_TaskDescription(const ListTasksResponse_TaskDescription& from);

  inline ListTasksResponse_TaskDescription& operator=(const ListTasksResponse_TaskDescription& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const ListTasksResponse_TaskDescription& default_instance();

  void Swap(ListTasksResponse_TaskDescription* other);

  // implements Message ----------------------------------------------

  ListTasksResponse_TaskDescription* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const ListTasksResponse_TaskDescription& from);
  void MergeFrom(const ListTasksResponse_TaskDescription& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required int32 taskId = 1;
  inline bool has_taskid() const;
  inline void clear_taskid();
  static const int kTaskIdFieldNumber = 1;
  inline ::google::protobuf::int32 taskid() const;
  inline void set_taskid(::google::protobuf::int32 value);

  // required string clientId = 2;
  inline bool has_clientid() const;
  inline void clear_clientid();
  static const int kClientIdFieldNumber = 2;
  inline const ::std::string& clientid() const;
  inline void set_clientid(const ::std::string& value);
  inline void set_clientid(const char* value);
  inline void set_clientid(const char* value, size_t size);
  inline ::std::string* mutable_clientid();
  inline ::std::string* release_clientid();
  inline void set_allocated_clientid(::std::string* clientid);

  // required .communication.Task task = 3;
  inline bool has_task() const;
  inline void clear_task();
  static const int kTaskFieldNumber = 3;
  inline const ::communication::Task& task() const;
  inline ::communication::Task* mutable_task();
  inline ::communication::Task* release_task();
  inline void set_allocated_task(::communication::Task* task);

  // optional int64 result = 4;
  inline bool has_result() const;
  inline void clear_result();
  static const int kResultFieldNumber = 4;
  inline ::google::protobuf::int64 result() const;
  inline void set_result(::google::protobuf::int64 value);

  // @@protoc_insertion_point(class_scope:communication.ListTasksResponse.TaskDescription)
 private:
  inline void set_has_taskid();
  inline void clear_has_taskid();
  inline void set_has_clientid();
  inline void clear_has_clientid();
  inline void set_has_task();
  inline void clear_has_task();
  inline void set_has_result();
  inline void clear_has_result();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::std::string* clientid_;
  ::communication::Task* task_;
  ::google::protobuf::int64 result_;
  ::google::protobuf::int32 taskid_;
  friend void  protobuf_AddDesc_protocol_2eproto();
  friend void protobuf_AssignDesc_protocol_2eproto();
  friend void protobuf_ShutdownFile_protocol_2eproto();

  void InitAsDefaultInstance();
  static ListTasksResponse_TaskDescription* default_instance_;
};
// -------------------------------------------------------------------

class ListTasksResponse : public ::google::protobuf::Message {
 public:
  ListTasksResponse();
  virtual ~ListTasksResponse();

  ListTasksResponse(const ListTasksResponse& from);

  inline ListTasksResponse& operator=(const ListTasksResponse& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const ListTasksResponse& default_instance();

  void Swap(ListTasksResponse* other);

  // implements Message ----------------------------------------------

  ListTasksResponse* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const ListTasksResponse& from);
  void MergeFrom(const ListTasksResponse& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  typedef ListTasksResponse_TaskDescription TaskDescription;

  // accessors -------------------------------------------------------

  // required .communication.Status status = 1;
  inline bool has_status() const;
  inline void clear_status();
  static const int kStatusFieldNumber = 1;
  inline ::communication::Status status() const;
  inline void set_status(::communication::Status value);

  // repeated .communication.ListTasksResponse.TaskDescription tasks = 2;
  inline int tasks_size() const;
  inline void clear_tasks();
  static const int kTasksFieldNumber = 2;
  inline const ::communication::ListTasksResponse_TaskDescription& tasks(int index) const;
  inline ::communication::ListTasksResponse_TaskDescription* mutable_tasks(int index);
  inline ::communication::ListTasksResponse_TaskDescription* add_tasks();
  inline const ::google::protobuf::RepeatedPtrField< ::communication::ListTasksResponse_TaskDescription >&
      tasks() const;
  inline ::google::protobuf::RepeatedPtrField< ::communication::ListTasksResponse_TaskDescription >*
      mutable_tasks();

  // @@protoc_insertion_point(class_scope:communication.ListTasksResponse)
 private:
  inline void set_has_status();
  inline void clear_has_status();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::RepeatedPtrField< ::communication::ListTasksResponse_TaskDescription > tasks_;
  int status_;
  friend void  protobuf_AddDesc_protocol_2eproto();
  friend void protobuf_AssignDesc_protocol_2eproto();
  friend void protobuf_ShutdownFile_protocol_2eproto();

  void InitAsDefaultInstance();
  static ListTasksResponse* default_instance_;
};
// ===================================================================


// ===================================================================

// WrapperMessage

// optional .communication.ServerRequest request = 1;
inline bool WrapperMessage::has_request() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void WrapperMessage::set_has_request() {
  _has_bits_[0] |= 0x00000001u;
}
inline void WrapperMessage::clear_has_request() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void WrapperMessage::clear_request() {
  if (request_ != NULL) request_->::communication::ServerRequest::Clear();
  clear_has_request();
}
inline const ::communication::ServerRequest& WrapperMessage::request() const {
  // @@protoc_insertion_point(field_get:communication.WrapperMessage.request)
  return request_ != NULL ? *request_ : *default_instance_->request_;
}
inline ::communication::ServerRequest* WrapperMessage::mutable_request() {
  set_has_request();
  if (request_ == NULL) request_ = new ::communication::ServerRequest;
  // @@protoc_insertion_point(field_mutable:communication.WrapperMessage.request)
  return request_;
}
inline ::communication::ServerRequest* WrapperMessage::release_request() {
  clear_has_request();
  ::communication::ServerRequest* temp = request_;
  request_ = NULL;
  return temp;
}
inline void WrapperMessage::set_allocated_request(::communication::ServerRequest* request) {
  delete request_;
  request_ = request;
  if (request) {
    set_has_request();
  } else {
    clear_has_request();
  }
  // @@protoc_insertion_point(field_set_allocated:communication.WrapperMessage.request)
}

// optional .communication.ServerResponse response = 2;
inline bool WrapperMessage::has_response() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void WrapperMessage::set_has_response() {
  _has_bits_[0] |= 0x00000002u;
}
inline void WrapperMessage::clear_has_response() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void WrapperMessage::clear_response() {
  if (response_ != NULL) response_->::communication::ServerResponse::Clear();
  clear_has_response();
}
inline const ::communication::ServerResponse& WrapperMessage::response() const {
  // @@protoc_insertion_point(field_get:communication.WrapperMessage.response)
  return response_ != NULL ? *response_ : *default_instance_->response_;
}
inline ::communication::ServerResponse* WrapperMessage::mutable_response() {
  set_has_response();
  if (response_ == NULL) response_ = new ::communication::ServerResponse;
  // @@protoc_insertion_point(field_mutable:communication.WrapperMessage.response)
  return response_;
}
inline ::communication::ServerResponse* WrapperMessage::release_response() {
  clear_has_response();
  ::communication::ServerResponse* temp = response_;
  response_ = NULL;
  return temp;
}
inline void WrapperMessage::set_allocated_response(::communication::ServerResponse* response) {
  delete response_;
  response_ = response;
  if (response) {
    set_has_response();
  } else {
    clear_has_response();
  }
  // @@protoc_insertion_point(field_set_allocated:communication.WrapperMessage.response)
}

// -------------------------------------------------------------------

// ServerRequest

// required string client_id = 1;
inline bool ServerRequest::has_client_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void ServerRequest::set_has_client_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void ServerRequest::clear_has_client_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void ServerRequest::clear_client_id() {
  if (client_id_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    client_id_->clear();
  }
  clear_has_client_id();
}
inline const ::std::string& ServerRequest::client_id() const {
  // @@protoc_insertion_point(field_get:communication.ServerRequest.client_id)
  return *client_id_;
}
inline void ServerRequest::set_client_id(const ::std::string& value) {
  set_has_client_id();
  if (client_id_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    client_id_ = new ::std::string;
  }
  client_id_->assign(value);
  // @@protoc_insertion_point(field_set:communication.ServerRequest.client_id)
}
inline void ServerRequest::set_client_id(const char* value) {
  set_has_client_id();
  if (client_id_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    client_id_ = new ::std::string;
  }
  client_id_->assign(value);
  // @@protoc_insertion_point(field_set_char:communication.ServerRequest.client_id)
}
inline void ServerRequest::set_client_id(const char* value, size_t size) {
  set_has_client_id();
  if (client_id_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    client_id_ = new ::std::string;
  }
  client_id_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:communication.ServerRequest.client_id)
}
inline ::std::string* ServerRequest::mutable_client_id() {
  set_has_client_id();
  if (client_id_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    client_id_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:communication.ServerRequest.client_id)
  return client_id_;
}
inline ::std::string* ServerRequest::release_client_id() {
  clear_has_client_id();
  if (client_id_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = client_id_;
    client_id_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void ServerRequest::set_allocated_client_id(::std::string* client_id) {
  if (client_id_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete client_id_;
  }
  if (client_id) {
    set_has_client_id();
    client_id_ = client_id;
  } else {
    clear_has_client_id();
    client_id_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:communication.ServerRequest.client_id)
}

// required int64 request_id = 2;
inline bool ServerRequest::has_request_id() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void ServerRequest::set_has_request_id() {
  _has_bits_[0] |= 0x00000002u;
}
inline void ServerRequest::clear_has_request_id() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void ServerRequest::clear_request_id() {
  request_id_ = GOOGLE_LONGLONG(0);
  clear_has_request_id();
}
inline ::google::protobuf::int64 ServerRequest::request_id() const {
  // @@protoc_insertion_point(field_get:communication.ServerRequest.request_id)
  return request_id_;
}
inline void ServerRequest::set_request_id(::google::protobuf::int64 value) {
  set_has_request_id();
  request_id_ = value;
  // @@protoc_insertion_point(field_set:communication.ServerRequest.request_id)
}

// optional .communication.SubmitTask submit = 3;
inline bool ServerRequest::has_submit() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void ServerRequest::set_has_submit() {
  _has_bits_[0] |= 0x00000004u;
}
inline void ServerRequest::clear_has_submit() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void ServerRequest::clear_submit() {
  if (submit_ != NULL) submit_->::communication::SubmitTask::Clear();
  clear_has_submit();
}
inline const ::communication::SubmitTask& ServerRequest::submit() const {
  // @@protoc_insertion_point(field_get:communication.ServerRequest.submit)
  return submit_ != NULL ? *submit_ : *default_instance_->submit_;
}
inline ::communication::SubmitTask* ServerRequest::mutable_submit() {
  set_has_submit();
  if (submit_ == NULL) submit_ = new ::communication::SubmitTask;
  // @@protoc_insertion_point(field_mutable:communication.ServerRequest.submit)
  return submit_;
}
inline ::communication::SubmitTask* ServerRequest::release_submit() {
  clear_has_submit();
  ::communication::SubmitTask* temp = submit_;
  submit_ = NULL;
  return temp;
}
inline void ServerRequest::set_allocated_submit(::communication::SubmitTask* submit) {
  delete submit_;
  submit_ = submit;
  if (submit) {
    set_has_submit();
  } else {
    clear_has_submit();
  }
  // @@protoc_insertion_point(field_set_allocated:communication.ServerRequest.submit)
}

// optional .communication.Subscribe subscribe = 4;
inline bool ServerRequest::has_subscribe() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void ServerRequest::set_has_subscribe() {
  _has_bits_[0] |= 0x00000008u;
}
inline void ServerRequest::clear_has_subscribe() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void ServerRequest::clear_subscribe() {
  if (subscribe_ != NULL) subscribe_->::communication::Subscribe::Clear();
  clear_has_subscribe();
}
inline const ::communication::Subscribe& ServerRequest::subscribe() const {
  // @@protoc_insertion_point(field_get:communication.ServerRequest.subscribe)
  return subscribe_ != NULL ? *subscribe_ : *default_instance_->subscribe_;
}
inline ::communication::Subscribe* ServerRequest::mutable_subscribe() {
  set_has_subscribe();
  if (subscribe_ == NULL) subscribe_ = new ::communication::Subscribe;
  // @@protoc_insertion_point(field_mutable:communication.ServerRequest.subscribe)
  return subscribe_;
}
inline ::communication::Subscribe* ServerRequest::release_subscribe() {
  clear_has_subscribe();
  ::communication::Subscribe* temp = subscribe_;
  subscribe_ = NULL;
  return temp;
}
inline void ServerRequest::set_allocated_subscribe(::communication::Subscribe* subscribe) {
  delete subscribe_;
  subscribe_ = subscribe;
  if (subscribe) {
    set_has_subscribe();
  } else {
    clear_has_subscribe();
  }
  // @@protoc_insertion_point(field_set_allocated:communication.ServerRequest.subscribe)
}

// optional .communication.ListTasks list = 5;
inline bool ServerRequest::has_list() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void ServerRequest::set_has_list() {
  _has_bits_[0] |= 0x00000010u;
}
inline void ServerRequest::clear_has_list() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void ServerRequest::clear_list() {
  if (list_ != NULL) list_->::communication::ListTasks::Clear();
  clear_has_list();
}
inline const ::communication::ListTasks& ServerRequest::list() const {
  // @@protoc_insertion_point(field_get:communication.ServerRequest.list)
  return list_ != NULL ? *list_ : *default_instance_->list_;
}
inline ::communication::ListTasks* ServerRequest::mutable_list() {
  set_has_list();
  if (list_ == NULL) list_ = new ::communication::ListTasks;
  // @@protoc_insertion_point(field_mutable:communication.ServerRequest.list)
  return list_;
}
inline ::communication::ListTasks* ServerRequest::release_list() {
  clear_has_list();
  ::communication::ListTasks* temp = list_;
  list_ = NULL;
  return temp;
}
inline void ServerRequest::set_allocated_list(::communication::ListTasks* list) {
  delete list_;
  list_ = list;
  if (list) {
    set_has_list();
  } else {
    clear_has_list();
  }
  // @@protoc_insertion_point(field_set_allocated:communication.ServerRequest.list)
}

// -------------------------------------------------------------------

// ServerResponse

// required int64 request_id = 1;
inline bool ServerResponse::has_request_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void ServerResponse::set_has_request_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void ServerResponse::clear_has_request_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void ServerResponse::clear_request_id() {
  request_id_ = GOOGLE_LONGLONG(0);
  clear_has_request_id();
}
inline ::google::protobuf::int64 ServerResponse::request_id() const {
  // @@protoc_insertion_point(field_get:communication.ServerResponse.request_id)
  return request_id_;
}
inline void ServerResponse::set_request_id(::google::protobuf::int64 value) {
  set_has_request_id();
  request_id_ = value;
  // @@protoc_insertion_point(field_set:communication.ServerResponse.request_id)
}

// optional .communication.SubmitTaskResponse submitResponse = 2;
inline bool ServerResponse::has_submitresponse() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void ServerResponse::set_has_submitresponse() {
  _has_bits_[0] |= 0x00000002u;
}
inline void ServerResponse::clear_has_submitresponse() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void ServerResponse::clear_submitresponse() {
  if (submitresponse_ != NULL) submitresponse_->::communication::SubmitTaskResponse::Clear();
  clear_has_submitresponse();
}
inline const ::communication::SubmitTaskResponse& ServerResponse::submitresponse() const {
  // @@protoc_insertion_point(field_get:communication.ServerResponse.submitResponse)
  return submitresponse_ != NULL ? *submitresponse_ : *default_instance_->submitresponse_;
}
inline ::communication::SubmitTaskResponse* ServerResponse::mutable_submitresponse() {
  set_has_submitresponse();
  if (submitresponse_ == NULL) submitresponse_ = new ::communication::SubmitTaskResponse;
  // @@protoc_insertion_point(field_mutable:communication.ServerResponse.submitResponse)
  return submitresponse_;
}
inline ::communication::SubmitTaskResponse* ServerResponse::release_submitresponse() {
  clear_has_submitresponse();
  ::communication::SubmitTaskResponse* temp = submitresponse_;
  submitresponse_ = NULL;
  return temp;
}
inline void ServerResponse::set_allocated_submitresponse(::communication::SubmitTaskResponse* submitresponse) {
  delete submitresponse_;
  submitresponse_ = submitresponse;
  if (submitresponse) {
    set_has_submitresponse();
  } else {
    clear_has_submitresponse();
  }
  // @@protoc_insertion_point(field_set_allocated:communication.ServerResponse.submitResponse)
}

// optional .communication.SubscribeResponse subscribeResponse = 3;
inline bool ServerResponse::has_subscriberesponse() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void ServerResponse::set_has_subscriberesponse() {
  _has_bits_[0] |= 0x00000004u;
}
inline void ServerResponse::clear_has_subscriberesponse() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void ServerResponse::clear_subscriberesponse() {
  if (subscriberesponse_ != NULL) subscriberesponse_->::communication::SubscribeResponse::Clear();
  clear_has_subscriberesponse();
}
inline const ::communication::SubscribeResponse& ServerResponse::subscriberesponse() const {
  // @@protoc_insertion_point(field_get:communication.ServerResponse.subscribeResponse)
  return subscriberesponse_ != NULL ? *subscriberesponse_ : *default_instance_->subscriberesponse_;
}
inline ::communication::SubscribeResponse* ServerResponse::mutable_subscriberesponse() {
  set_has_subscriberesponse();
  if (subscriberesponse_ == NULL) subscriberesponse_ = new ::communication::SubscribeResponse;
  // @@protoc_insertion_point(field_mutable:communication.ServerResponse.subscribeResponse)
  return subscriberesponse_;
}
inline ::communication::SubscribeResponse* ServerResponse::release_subscriberesponse() {
  clear_has_subscriberesponse();
  ::communication::SubscribeResponse* temp = subscriberesponse_;
  subscriberesponse_ = NULL;
  return temp;
}
inline void ServerResponse::set_allocated_subscriberesponse(::communication::SubscribeResponse* subscriberesponse) {
  delete subscriberesponse_;
  subscriberesponse_ = subscriberesponse;
  if (subscriberesponse) {
    set_has_subscriberesponse();
  } else {
    clear_has_subscriberesponse();
  }
  // @@protoc_insertion_point(field_set_allocated:communication.ServerResponse.subscribeResponse)
}

// optional .communication.ListTasksResponse listResponse = 4;
inline bool ServerResponse::has_listresponse() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void ServerResponse::set_has_listresponse() {
  _has_bits_[0] |= 0x00000008u;
}
inline void ServerResponse::clear_has_listresponse() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void ServerResponse::clear_listresponse() {
  if (listresponse_ != NULL) listresponse_->::communication::ListTasksResponse::Clear();
  clear_has_listresponse();
}
inline const ::communication::ListTasksResponse& ServerResponse::listresponse() const {
  // @@protoc_insertion_point(field_get:communication.ServerResponse.listResponse)
  return listresponse_ != NULL ? *listresponse_ : *default_instance_->listresponse_;
}
inline ::communication::ListTasksResponse* ServerResponse::mutable_listresponse() {
  set_has_listresponse();
  if (listresponse_ == NULL) listresponse_ = new ::communication::ListTasksResponse;
  // @@protoc_insertion_point(field_mutable:communication.ServerResponse.listResponse)
  return listresponse_;
}
inline ::communication::ListTasksResponse* ServerResponse::release_listresponse() {
  clear_has_listresponse();
  ::communication::ListTasksResponse* temp = listresponse_;
  listresponse_ = NULL;
  return temp;
}
inline void ServerResponse::set_allocated_listresponse(::communication::ListTasksResponse* listresponse) {
  delete listresponse_;
  listresponse_ = listresponse;
  if (listresponse) {
    set_has_listresponse();
  } else {
    clear_has_listresponse();
  }
  // @@protoc_insertion_point(field_set_allocated:communication.ServerResponse.listResponse)
}

// -------------------------------------------------------------------

// Task_Param

// optional int64 value = 1;
inline bool Task_Param::has_value() const {
  return param_value_case() == kValue;
}
inline void Task_Param::set_has_value() {
  _oneof_case_[0] = kValue;
}
inline void Task_Param::clear_value() {
  if (has_value()) {
    param_value_.value_ = GOOGLE_LONGLONG(0);
    clear_has_param_value();
  }
}
inline ::google::protobuf::int64 Task_Param::value() const {
  if (has_value()) {
    return param_value_.value_;
  }
  return GOOGLE_LONGLONG(0);
}
inline void Task_Param::set_value(::google::protobuf::int64 value) {
  if (!has_value()) {
    clear_param_value();
    set_has_value();
  }
  param_value_.value_ = value;
}

// optional int64 dependentTaskId = 2;
inline bool Task_Param::has_dependenttaskid() const {
  return param_value_case() == kDependentTaskId;
}
inline void Task_Param::set_has_dependenttaskid() {
  _oneof_case_[0] = kDependentTaskId;
}
inline void Task_Param::clear_dependenttaskid() {
  if (has_dependenttaskid()) {
    param_value_.dependenttaskid_ = GOOGLE_LONGLONG(0);
    clear_has_param_value();
  }
}
inline ::google::protobuf::int64 Task_Param::dependenttaskid() const {
  if (has_dependenttaskid()) {
    return param_value_.dependenttaskid_;
  }
  return GOOGLE_LONGLONG(0);
}
inline void Task_Param::set_dependenttaskid(::google::protobuf::int64 value) {
  if (!has_dependenttaskid()) {
    clear_param_value();
    set_has_dependenttaskid();
  }
  param_value_.dependenttaskid_ = value;
}

inline bool Task_Param::has_param_value() {
  return param_value_case() != PARAM_VALUE_NOT_SET;
}
inline void Task_Param::clear_has_param_value() {
  _oneof_case_[0] = PARAM_VALUE_NOT_SET;
}
inline Task_Param::ParamValueCase Task_Param::param_value_case() const {
  return Task_Param::ParamValueCase(_oneof_case_[0]);
}
// -------------------------------------------------------------------

// Task

// required .communication.Task.Param a = 1;
inline bool Task::has_a() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void Task::set_has_a() {
  _has_bits_[0] |= 0x00000001u;
}
inline void Task::clear_has_a() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void Task::clear_a() {
  if (a_ != NULL) a_->::communication::Task_Param::Clear();
  clear_has_a();
}
inline const ::communication::Task_Param& Task::a() const {
  // @@protoc_insertion_point(field_get:communication.Task.a)
  return a_ != NULL ? *a_ : *default_instance_->a_;
}
inline ::communication::Task_Param* Task::mutable_a() {
  set_has_a();
  if (a_ == NULL) a_ = new ::communication::Task_Param;
  // @@protoc_insertion_point(field_mutable:communication.Task.a)
  return a_;
}
inline ::communication::Task_Param* Task::release_a() {
  clear_has_a();
  ::communication::Task_Param* temp = a_;
  a_ = NULL;
  return temp;
}
inline void Task::set_allocated_a(::communication::Task_Param* a) {
  delete a_;
  a_ = a;
  if (a) {
    set_has_a();
  } else {
    clear_has_a();
  }
  // @@protoc_insertion_point(field_set_allocated:communication.Task.a)
}

// required .communication.Task.Param b = 2;
inline bool Task::has_b() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void Task::set_has_b() {
  _has_bits_[0] |= 0x00000002u;
}
inline void Task::clear_has_b() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void Task::clear_b() {
  if (b_ != NULL) b_->::communication::Task_Param::Clear();
  clear_has_b();
}
inline const ::communication::Task_Param& Task::b() const {
  // @@protoc_insertion_point(field_get:communication.Task.b)
  return b_ != NULL ? *b_ : *default_instance_->b_;
}
inline ::communication::Task_Param* Task::mutable_b() {
  set_has_b();
  if (b_ == NULL) b_ = new ::communication::Task_Param;
  // @@protoc_insertion_point(field_mutable:communication.Task.b)
  return b_;
}
inline ::communication::Task_Param* Task::release_b() {
  clear_has_b();
  ::communication::Task_Param* temp = b_;
  b_ = NULL;
  return temp;
}
inline void Task::set_allocated_b(::communication::Task_Param* b) {
  delete b_;
  b_ = b;
  if (b) {
    set_has_b();
  } else {
    clear_has_b();
  }
  // @@protoc_insertion_point(field_set_allocated:communication.Task.b)
}

// required .communication.Task.Param p = 3;
inline bool Task::has_p() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void Task::set_has_p() {
  _has_bits_[0] |= 0x00000004u;
}
inline void Task::clear_has_p() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void Task::clear_p() {
  if (p_ != NULL) p_->::communication::Task_Param::Clear();
  clear_has_p();
}
inline const ::communication::Task_Param& Task::p() const {
  // @@protoc_insertion_point(field_get:communication.Task.p)
  return p_ != NULL ? *p_ : *default_instance_->p_;
}
inline ::communication::Task_Param* Task::mutable_p() {
  set_has_p();
  if (p_ == NULL) p_ = new ::communication::Task_Param;
  // @@protoc_insertion_point(field_mutable:communication.Task.p)
  return p_;
}
inline ::communication::Task_Param* Task::release_p() {
  clear_has_p();
  ::communication::Task_Param* temp = p_;
  p_ = NULL;
  return temp;
}
inline void Task::set_allocated_p(::communication::Task_Param* p) {
  delete p_;
  p_ = p;
  if (p) {
    set_has_p();
  } else {
    clear_has_p();
  }
  // @@protoc_insertion_point(field_set_allocated:communication.Task.p)
}

// required .communication.Task.Param m = 4;
inline bool Task::has_m() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void Task::set_has_m() {
  _has_bits_[0] |= 0x00000008u;
}
inline void Task::clear_has_m() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void Task::clear_m() {
  if (m_ != NULL) m_->::communication::Task_Param::Clear();
  clear_has_m();
}
inline const ::communication::Task_Param& Task::m() const {
  // @@protoc_insertion_point(field_get:communication.Task.m)
  return m_ != NULL ? *m_ : *default_instance_->m_;
}
inline ::communication::Task_Param* Task::mutable_m() {
  set_has_m();
  if (m_ == NULL) m_ = new ::communication::Task_Param;
  // @@protoc_insertion_point(field_mutable:communication.Task.m)
  return m_;
}
inline ::communication::Task_Param* Task::release_m() {
  clear_has_m();
  ::communication::Task_Param* temp = m_;
  m_ = NULL;
  return temp;
}
inline void Task::set_allocated_m(::communication::Task_Param* m) {
  delete m_;
  m_ = m;
  if (m) {
    set_has_m();
  } else {
    clear_has_m();
  }
  // @@protoc_insertion_point(field_set_allocated:communication.Task.m)
}

// required int64 n = 5;
inline bool Task::has_n() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void Task::set_has_n() {
  _has_bits_[0] |= 0x00000010u;
}
inline void Task::clear_has_n() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void Task::clear_n() {
  n_ = GOOGLE_LONGLONG(0);
  clear_has_n();
}
inline ::google::protobuf::int64 Task::n() const {
  // @@protoc_insertion_point(field_get:communication.Task.n)
  return n_;
}
inline void Task::set_n(::google::protobuf::int64 value) {
  set_has_n();
  n_ = value;
  // @@protoc_insertion_point(field_set:communication.Task.n)
}

// -------------------------------------------------------------------

// SubmitTask

// required .communication.Task task = 1;
inline bool SubmitTask::has_task() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void SubmitTask::set_has_task() {
  _has_bits_[0] |= 0x00000001u;
}
inline void SubmitTask::clear_has_task() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void SubmitTask::clear_task() {
  if (task_ != NULL) task_->::communication::Task::Clear();
  clear_has_task();
}
inline const ::communication::Task& SubmitTask::task() const {
  // @@protoc_insertion_point(field_get:communication.SubmitTask.task)
  return task_ != NULL ? *task_ : *default_instance_->task_;
}
inline ::communication::Task* SubmitTask::mutable_task() {
  set_has_task();
  if (task_ == NULL) task_ = new ::communication::Task;
  // @@protoc_insertion_point(field_mutable:communication.SubmitTask.task)
  return task_;
}
inline ::communication::Task* SubmitTask::release_task() {
  clear_has_task();
  ::communication::Task* temp = task_;
  task_ = NULL;
  return temp;
}
inline void SubmitTask::set_allocated_task(::communication::Task* task) {
  delete task_;
  task_ = task;
  if (task) {
    set_has_task();
  } else {
    clear_has_task();
  }
  // @@protoc_insertion_point(field_set_allocated:communication.SubmitTask.task)
}

// -------------------------------------------------------------------

// SubmitTaskResponse

// required int32 submittedTaskId = 1;
inline bool SubmitTaskResponse::has_submittedtaskid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void SubmitTaskResponse::set_has_submittedtaskid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void SubmitTaskResponse::clear_has_submittedtaskid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void SubmitTaskResponse::clear_submittedtaskid() {
  submittedtaskid_ = 0;
  clear_has_submittedtaskid();
}
inline ::google::protobuf::int32 SubmitTaskResponse::submittedtaskid() const {
  // @@protoc_insertion_point(field_get:communication.SubmitTaskResponse.submittedTaskId)
  return submittedtaskid_;
}
inline void SubmitTaskResponse::set_submittedtaskid(::google::protobuf::int32 value) {
  set_has_submittedtaskid();
  submittedtaskid_ = value;
  // @@protoc_insertion_point(field_set:communication.SubmitTaskResponse.submittedTaskId)
}

// required .communication.Status status = 2;
inline bool SubmitTaskResponse::has_status() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void SubmitTaskResponse::set_has_status() {
  _has_bits_[0] |= 0x00000002u;
}
inline void SubmitTaskResponse::clear_has_status() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void SubmitTaskResponse::clear_status() {
  status_ = 1;
  clear_has_status();
}
inline ::communication::Status SubmitTaskResponse::status() const {
  // @@protoc_insertion_point(field_get:communication.SubmitTaskResponse.status)
  return static_cast< ::communication::Status >(status_);
}
inline void SubmitTaskResponse::set_status(::communication::Status value) {
  assert(::communication::Status_IsValid(value));
  set_has_status();
  status_ = value;
  // @@protoc_insertion_point(field_set:communication.SubmitTaskResponse.status)
}

// -------------------------------------------------------------------

// Subscribe

// required int32 taskId = 1;
inline bool Subscribe::has_taskid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void Subscribe::set_has_taskid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void Subscribe::clear_has_taskid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void Subscribe::clear_taskid() {
  taskid_ = 0;
  clear_has_taskid();
}
inline ::google::protobuf::int32 Subscribe::taskid() const {
  // @@protoc_insertion_point(field_get:communication.Subscribe.taskId)
  return taskid_;
}
inline void Subscribe::set_taskid(::google::protobuf::int32 value) {
  set_has_taskid();
  taskid_ = value;
  // @@protoc_insertion_point(field_set:communication.Subscribe.taskId)
}

// -------------------------------------------------------------------

// SubscribeResponse

// required .communication.Status status = 1;
inline bool SubscribeResponse::has_status() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void SubscribeResponse::set_has_status() {
  _has_bits_[0] |= 0x00000001u;
}
inline void SubscribeResponse::clear_has_status() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void SubscribeResponse::clear_status() {
  status_ = 1;
  clear_has_status();
}
inline ::communication::Status SubscribeResponse::status() const {
  // @@protoc_insertion_point(field_get:communication.SubscribeResponse.status)
  return static_cast< ::communication::Status >(status_);
}
inline void SubscribeResponse::set_status(::communication::Status value) {
  assert(::communication::Status_IsValid(value));
  set_has_status();
  status_ = value;
  // @@protoc_insertion_point(field_set:communication.SubscribeResponse.status)
}

// optional int64 value = 2;
inline bool SubscribeResponse::has_value() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void SubscribeResponse::set_has_value() {
  _has_bits_[0] |= 0x00000002u;
}
inline void SubscribeResponse::clear_has_value() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void SubscribeResponse::clear_value() {
  value_ = GOOGLE_LONGLONG(0);
  clear_has_value();
}
inline ::google::protobuf::int64 SubscribeResponse::value() const {
  // @@protoc_insertion_point(field_get:communication.SubscribeResponse.value)
  return value_;
}
inline void SubscribeResponse::set_value(::google::protobuf::int64 value) {
  set_has_value();
  value_ = value;
  // @@protoc_insertion_point(field_set:communication.SubscribeResponse.value)
}

// -------------------------------------------------------------------

// ListTasks

// -------------------------------------------------------------------

// ListTasksResponse_TaskDescription

// required int32 taskId = 1;
inline bool ListTasksResponse_TaskDescription::has_taskid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void ListTasksResponse_TaskDescription::set_has_taskid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void ListTasksResponse_TaskDescription::clear_has_taskid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void ListTasksResponse_TaskDescription::clear_taskid() {
  taskid_ = 0;
  clear_has_taskid();
}
inline ::google::protobuf::int32 ListTasksResponse_TaskDescription::taskid() const {
  // @@protoc_insertion_point(field_get:communication.ListTasksResponse.TaskDescription.taskId)
  return taskid_;
}
inline void ListTasksResponse_TaskDescription::set_taskid(::google::protobuf::int32 value) {
  set_has_taskid();
  taskid_ = value;
  // @@protoc_insertion_point(field_set:communication.ListTasksResponse.TaskDescription.taskId)
}

// required string clientId = 2;
inline bool ListTasksResponse_TaskDescription::has_clientid() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void ListTasksResponse_TaskDescription::set_has_clientid() {
  _has_bits_[0] |= 0x00000002u;
}
inline void ListTasksResponse_TaskDescription::clear_has_clientid() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void ListTasksResponse_TaskDescription::clear_clientid() {
  if (clientid_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    clientid_->clear();
  }
  clear_has_clientid();
}
inline const ::std::string& ListTasksResponse_TaskDescription::clientid() const {
  // @@protoc_insertion_point(field_get:communication.ListTasksResponse.TaskDescription.clientId)
  return *clientid_;
}
inline void ListTasksResponse_TaskDescription::set_clientid(const ::std::string& value) {
  set_has_clientid();
  if (clientid_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    clientid_ = new ::std::string;
  }
  clientid_->assign(value);
  // @@protoc_insertion_point(field_set:communication.ListTasksResponse.TaskDescription.clientId)
}
inline void ListTasksResponse_TaskDescription::set_clientid(const char* value) {
  set_has_clientid();
  if (clientid_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    clientid_ = new ::std::string;
  }
  clientid_->assign(value);
  // @@protoc_insertion_point(field_set_char:communication.ListTasksResponse.TaskDescription.clientId)
}
inline void ListTasksResponse_TaskDescription::set_clientid(const char* value, size_t size) {
  set_has_clientid();
  if (clientid_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    clientid_ = new ::std::string;
  }
  clientid_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:communication.ListTasksResponse.TaskDescription.clientId)
}
inline ::std::string* ListTasksResponse_TaskDescription::mutable_clientid() {
  set_has_clientid();
  if (clientid_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    clientid_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:communication.ListTasksResponse.TaskDescription.clientId)
  return clientid_;
}
inline ::std::string* ListTasksResponse_TaskDescription::release_clientid() {
  clear_has_clientid();
  if (clientid_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = clientid_;
    clientid_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void ListTasksResponse_TaskDescription::set_allocated_clientid(::std::string* clientid) {
  if (clientid_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete clientid_;
  }
  if (clientid) {
    set_has_clientid();
    clientid_ = clientid;
  } else {
    clear_has_clientid();
    clientid_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:communication.ListTasksResponse.TaskDescription.clientId)
}

// required .communication.Task task = 3;
inline bool ListTasksResponse_TaskDescription::has_task() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void ListTasksResponse_TaskDescription::set_has_task() {
  _has_bits_[0] |= 0x00000004u;
}
inline void ListTasksResponse_TaskDescription::clear_has_task() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void ListTasksResponse_TaskDescription::clear_task() {
  if (task_ != NULL) task_->::communication::Task::Clear();
  clear_has_task();
}
inline const ::communication::Task& ListTasksResponse_TaskDescription::task() const {
  // @@protoc_insertion_point(field_get:communication.ListTasksResponse.TaskDescription.task)
  return task_ != NULL ? *task_ : *default_instance_->task_;
}
inline ::communication::Task* ListTasksResponse_TaskDescription::mutable_task() {
  set_has_task();
  if (task_ == NULL) task_ = new ::communication::Task;
  // @@protoc_insertion_point(field_mutable:communication.ListTasksResponse.TaskDescription.task)
  return task_;
}
inline ::communication::Task* ListTasksResponse_TaskDescription::release_task() {
  clear_has_task();
  ::communication::Task* temp = task_;
  task_ = NULL;
  return temp;
}
inline void ListTasksResponse_TaskDescription::set_allocated_task(::communication::Task* task) {
  delete task_;
  task_ = task;
  if (task) {
    set_has_task();
  } else {
    clear_has_task();
  }
  // @@protoc_insertion_point(field_set_allocated:communication.ListTasksResponse.TaskDescription.task)
}

// optional int64 result = 4;
inline bool ListTasksResponse_TaskDescription::has_result() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void ListTasksResponse_TaskDescription::set_has_result() {
  _has_bits_[0] |= 0x00000008u;
}
inline void ListTasksResponse_TaskDescription::clear_has_result() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void ListTasksResponse_TaskDescription::clear_result() {
  result_ = GOOGLE_LONGLONG(0);
  clear_has_result();
}
inline ::google::protobuf::int64 ListTasksResponse_TaskDescription::result() const {
  // @@protoc_insertion_point(field_get:communication.ListTasksResponse.TaskDescription.result)
  return result_;
}
inline void ListTasksResponse_TaskDescription::set_result(::google::protobuf::int64 value) {
  set_has_result();
  result_ = value;
  // @@protoc_insertion_point(field_set:communication.ListTasksResponse.TaskDescription.result)
}

// -------------------------------------------------------------------

// ListTasksResponse

// required .communication.Status status = 1;
inline bool ListTasksResponse::has_status() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void ListTasksResponse::set_has_status() {
  _has_bits_[0] |= 0x00000001u;
}
inline void ListTasksResponse::clear_has_status() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void ListTasksResponse::clear_status() {
  status_ = 1;
  clear_has_status();
}
inline ::communication::Status ListTasksResponse::status() const {
  // @@protoc_insertion_point(field_get:communication.ListTasksResponse.status)
  return static_cast< ::communication::Status >(status_);
}
inline void ListTasksResponse::set_status(::communication::Status value) {
  assert(::communication::Status_IsValid(value));
  set_has_status();
  status_ = value;
  // @@protoc_insertion_point(field_set:communication.ListTasksResponse.status)
}

// repeated .communication.ListTasksResponse.TaskDescription tasks = 2;
inline int ListTasksResponse::tasks_size() const {
  return tasks_.size();
}
inline void ListTasksResponse::clear_tasks() {
  tasks_.Clear();
}
inline const ::communication::ListTasksResponse_TaskDescription& ListTasksResponse::tasks(int index) const {
  // @@protoc_insertion_point(field_get:communication.ListTasksResponse.tasks)
  return tasks_.Get(index);
}
inline ::communication::ListTasksResponse_TaskDescription* ListTasksResponse::mutable_tasks(int index) {
  // @@protoc_insertion_point(field_mutable:communication.ListTasksResponse.tasks)
  return tasks_.Mutable(index);
}
inline ::communication::ListTasksResponse_TaskDescription* ListTasksResponse::add_tasks() {
  // @@protoc_insertion_point(field_add:communication.ListTasksResponse.tasks)
  return tasks_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::communication::ListTasksResponse_TaskDescription >&
ListTasksResponse::tasks() const {
  // @@protoc_insertion_point(field_list:communication.ListTasksResponse.tasks)
  return tasks_;
}
inline ::google::protobuf::RepeatedPtrField< ::communication::ListTasksResponse_TaskDescription >*
ListTasksResponse::mutable_tasks() {
  // @@protoc_insertion_point(field_mutable_list:communication.ListTasksResponse.tasks)
  return &tasks_;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace communication

#ifndef SWIG
namespace google {
namespace protobuf {

template <> struct is_proto_enum< ::communication::Status> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::communication::Status>() {
  return ::communication::Status_descriptor();
}

}  // namespace google
}  // namespace protobuf
#endif  // SWIG

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_protocol_2eproto__INCLUDED
